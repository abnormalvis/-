硬件引脚
sbit OLED_SCL = P2 ^ 2; // 时钟线改至P2.2
sbit OLED_SDA = P2 ^ 3; // 数据线改至P2.3
sbit SDA = P2 ^ 1;      // AT24C1024B 的SDA和SCL
sbit SCL = P2 ^ 0;




一、volatile 
它会告诉编译器i是随时可能发生变化的，每次使用它的时候必须从i的地址中读取，因而编译器生成的可执行代码会重新从i的地址读取数据放在k中。
而优化做法是，由于编译器 发现两次从i读数据的代码之间的代码没有对i进行过操作，它会自动把上次读的数据放在k中。而不是重新从i里面读。
这样以来，如果i是一个寄存器变量或者表示一个端口数据就容 易出错，所以说volatile可以保证对特殊地址的稳定访问，不会出错。
二、在状态转换过程中，状态的更新涉及到多个变量的修改，例如更新当前状态和记录进入该状态的时间等。如果在这个过程中不关闭中断，可能会出现中断服务程序（ISR）打断了状态更新操作，导致全局状态变量 g_state 处于不一致的状态。比如，假设中断服务程序也访问或修改了 g_state.current_state 或 g_state.state_enter_time，那么在状态转换过程中被打断，可能会导致状态机的逻辑混乱，出现无法预料的行为
三、原子操作通俗理解
单步操作 ：就像生活中的按电梯按钮，这个动作是瞬间完成且不可分割的。一旦按下，电梯控制系统就会立即识别这个指令，不会有在按按钮一半时被其他操作干扰的情况。在计算机中，原子操作就像是这样一种 “瞬间完成” 的操作，它独立于其他操作，不会被打断。
数据库事务 ：可以类比银行转账。假设 A 转账给 B 一定金额，这个操作必须完整地包括减少 A 的账户余额和增加 B 的账户余额两个步骤。如果在执行过程中出现意外，比如网络故障，必须保证要么转账成功（两个步骤都完成），要么转账失败（两个步骤都没执行），不能出现只完成了减少 A 的余额，而没有增加 B 的余额的情况。原子操作在计算机系统的状态转换中就起到了类似的保证完整性的作用。